zookeeper-server-start c:\kafka_2.12-2.5.0\config\zookeeper.properties

kafka-server-start c:\kafka_2.12-2.5.0\config\server.properties

kafka-topics --create --topic first-topic --partitions 4 --replication-factor 1 --zookeeper localhost:2181

kafka-topics --list --zookeeper localhost:2181

kafka-topics --describe --topic first-topic --zookeeper localhost:2181

kafka-console-producer --topic first-topic --bootstrap-server localhost:9092

kafka-console-consumer --topic first-topic --bootstrap-server localhost:9092


kafka-dump-log --print-data-log --files c:\tmp\kafka-logs\first-topic-1\00000000000000000000.log

<dependencies>
  <!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients -->
<dependency>
    <groupId>org.apache.kafka</groupId>
    <artifactId>kafka-clients</artifactId>
    <version>2.5.0</version>
</dependency>
  
  </dependencies> 
  
package: com.jpmc.training.sender

class: SimpleSender 



package com.jpmc.training.sender;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

public class SimpleSender {
public static void main(String[] args) {
    Properties props=new Properties();
    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");
    props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());
    props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());
    
    String topic="first-topic";
    KafkaProducer<String, String> producer=new KafkaProducer<>(props);
    for(int i=1;i<=10;i++) {
        ProducerRecord<String, String> record=
                new ProducerRecord<>(topic,"This is  test message "+i);
        producer.send(record);
    }
    producer.close();
    System.out.println("messages sent");
}
}


package com.jpmc.training.sender;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

public class SenderWithMultipleKeys {
    public static void main(String[] args) {
        Properties props=new Properties();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());
        
        String topic="first-topic";
        KafkaProducer<String, String> producer=new KafkaProducer<>(props);
        for(int i=1;i<=10;i++) {
            ProducerRecord<String, String> record=
                    new ProducerRecord<>(topic,"first-key","This is  test message "+i);
            producer.send(record);
        }
        for(int i=11;i<=20;i++) {
            ProducerRecord<String, String> record=
                    new ProducerRecord<>(topic,"second-key","This is  test message "+i);
            producer.send(record);
        }
        for(int i=21;i<=30;i++) {
            ProducerRecord<String, String> record=
                    new ProducerRecord<>(topic,"third-key","This is  test message "+i);
            producer.send(record);
        }
        for(int i=31;i<=40;i++) {
            ProducerRecord<String, String> record=
                    new ProducerRecord<>(topic,"fourth-key","This is  test message "+i);
            producer.send(record);
        }
        for(int i=41;i<=50;i++) {
            ProducerRecord<String, String> record=
                    new ProducerRecord<>(topic,"fifth-key","This is  test message "+i);
            producer.send(record);
        }
        for(int i=51;i<=60;i++) {
            ProducerRecord<String, String> record=
                    new ProducerRecord<>(topic,"sixth-key","This is  test message "+i);
            producer.send(record);
        }
        producer.close();
        System.out.println("messages sent");
    }
}

kafka-console-consumer --topic first-topic --bootstrap-server localhost:9092 --property print.key=true

package:    com.jpmc.training.receiver

class:    SimpleReceiver


package com.jpmc.training.receiver;

import java.time.Duration;
import java.util.Collections;
import java.util.List;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.StringDeserializer;

public class SimpleReceiver {

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Properties props=new Properties();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        props.put(ConsumerConfig.GROUP_ID_CONFIG, "group-1");
        
        KafkaConsumer<String, String> consumer=new KafkaConsumer<>(props);
        List<String> topicList=Collections.singletonList("first-topic");
        consumer.subscribe(topicList);
        
        System.out.println("waiting for messages");
        
        while(true) {
            ConsumerRecords<String, String> records=consumer.poll(Duration.ofSeconds(30));
            records.forEach(record->System.out.println(
                    "Key:"+record.key()+"\tValue:"+record.value()+"\tPartition: "+record.partition()));
        }

    }

}

kafka-console-consumer --topic first-topic --bootstrap-server localhost:9092 --property print.key=true  --group group-1

kafka-consumer-groups --describe --group group-1 --bootstrap-server localhost:9092



package:         package com.jpmc.training.receiver;

import java.time.Duration;
import java.util.Collections;
import java.util.List;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.StringDeserializer;

public class SimpleReceiver {

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Properties props=new Properties();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        props.put(ConsumerConfig.GROUP_ID_CONFIG, "group-1");
        
        KafkaConsumer<String, String> consumer=new KafkaConsumer<>(props);
        List<String> topicList=Collections.singletonList("first-topic");
        consumer.subscribe(topicList);
        
        System.out.println("waiting for messages");
        
        while(true) {
            ConsumerRecords<String, String> records=consumer.poll(Duration.ofSeconds(30));
            records.forEach(record->System.out.println(
                    "Key:"+record.key()+"\tValue:"+record.value()+"\tPartition: "+record.partition()));
        }

    }

}


package:         com.jpmc.training.partitioner
class:           MessagePartitioner 
 

package com.jpmc.training.partitioner;

import java.util.Map;

import org.apache.kafka.clients.producer.Partitioner;
import org.apache.kafka.common.Cluster;

public class MessagePartitioner implements Partitioner{

    @Override
    public void configure(Map<String, ?> props) {
        // TODO Auto-generated method stub
        System.out.println("**********configuring**********");
        
    }

    @Override
    public void close() {
        // TODO Auto-generated method stub
        System.out.println("**********closing**********");
    }

    @Override
    public int partition(String topic, Object key, byte[] keyBytes, 
            Object value, byte[] valueBytes, Cluster cluster) {
        // TODO Auto-generated method stub
        int partition=3;
        if(key.equals("first-key")) {
            partition=0;
        }
        else if(key.equals("second-key")) {
            partition=1;
        }
        else if(key.equals("third-key")) {
            partition=2;
        }
        return partition;
    }

}


package com.jpmc.training.sender;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

import com.jpmc.training.partitioner.MessagePartitioner;

public class SenderWithCustomPartitioner {
    public static void main(String[] args) {
        Properties props=new Properties();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());
        props.put(ProducerConfig.PARTITIONER_CLASS_CONFIG,MessagePartitioner.class.getName());
        
        String topic="first-topic";
        KafkaProducer<String, String> producer=new KafkaProducer<>(props);
        for(int i=1;i<=10;i++) {
            ProducerRecord<String, String> record=
                    new ProducerRecord<>(topic,"first-key","This is  test message "+i);
            producer.send(record);
        }
        for(int i=11;i<=20;i++) {
            ProducerRecord<String, String> record=
                    new ProducerRecord<>(topic,"second-key","This is  test message "+i);
            producer.send(record);
        }
        for(int i=21;i<=30;i++) {
            ProducerRecord<String, String> record=
                    new ProducerRecord<>(topic,"third-key","This is  test message "+i);
            producer.send(record);
        }
        for(int i=31;i<=40;i++) {
            ProducerRecord<String, String> record=
                    new ProducerRecord<>(topic,"fourth-key","This is  test message "+i);
            producer.send(record);
        }
        for(int i=41;i<=50;i++) {
            ProducerRecord<String, String> record=
                    new ProducerRecord<>(topic,"fifth-key","This is  test message "+i);
            producer.send(record);
        }
        
        producer.close();
        System.out.println("messages sent");
    }
}



package com.jpmc.training.domain;

public class Employee {
    private int id;
    private String name;
    private String desingation;
    
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getDesingation() {
        return desingation;
    }
    public void setDesingation(String desingation) {
        this.desingation = desingation;
    }
    public Employee(int id, String name, String desingation) {
        super();
        this.id = id;
        this.name = name;
        this.desingation = desingation;
    }
    public Employee() {
        super();
        // TODO Auto-generated constructor stub
    }
    
    
    

}



<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.16.0</version>
</dependency>

package:         com.jpmc.training.serializer\
class:            EmployeeSerializer



package com.jpmc.training.serializer;

import org.apache.kafka.common.serialization.Serializer;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jpmc.training.domain.Employee;

public class EmployeeSerializer implements Serializer<Employee>{
    private ObjectMapper mapper=new ObjectMapper();
    @Override
    public byte[] serialize(String topic, Employee e) {
        // TODO Auto-generated method stub
        byte[] arr=null;
        try {
            arr=mapper.writeValueAsBytes(e);
        } catch (JsonProcessingException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        System.out.println("serialized to "+new String(arr));
        return arr;
    }

}


kafka-topics --create --topic emp-topic --partitions 3 --zookeeper localhost:2181 --replication-factor 1

package com.jpmc.training.sender;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

import com.jpmc.training.domain.Employee;
import com.jpmc.training.serializer.EmployeeSerializer;

public class EmployeeSender {
public static void main(String[] args) {
    Properties props=new Properties();
    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");
    props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());
    props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,EmployeeSerializer.class.getName());
    
    String topic="emp-topic";
    KafkaProducer<String, Employee> producer=new KafkaProducer<>(props);
    for(int i=1001;i<=1010;i++) {
        Employee employee=new Employee(i, "Name "+i, "Developer");
        ProducerRecord<String, Employee> record=
                new ProducerRecord<>(topic,"systems",employee);
        producer.send(record);
    }
    for(int i=1011;i<=1020;i++) {
        Employee employee=new Employee(i, "Name "+i, "Accountant");
        ProducerRecord<String, Employee> record=
                new ProducerRecord<>(topic,"finance",employee);
        producer.send(record);
    }
    producer.close();
    System.out.println("messages sent");
}
}



kafka-console-consumer --topic emp-topic --bootstrap-server localhost:9092 --property print.key=true


https://drive.google.com/drive/folders/1DMpty0sJ8EnzcLKbsgmJI6js8GLirHOZ?usp=sharing

